Mongo DB는 NoSQL중에서 가장 널리 사용되는 인기있는 제품이다.
사용과 운영이 상대적으로 매우 쉽고, JSON기반의 Document를 제공BSON
하기때문에, 데이타 구조에 대한 이해 및 사용이 쉽다.
또한 index나 search와 같은 feature를 제공하고 있고,
근래에는 Text Search와 GridFS를 이용한 파일 저장 그리고,
위치 정보 저장 및 쿼리 등 다양한 기능을 제공하고 있다.

Mongo DB는 10gen이라는 회사에서 개발되어서, 현재 오픈소스로와
상용버전으로 공급되고 있다.
이 글에서는 Mongo DB에 대한 이해를 돕기 위해서
간단한 설치부에서부터, 자바 기반의 프로그래밍 샘플까지 소개한다

C++로 구현(c#,go)
AGPL 라이센스
샤딩,마스터슬레이브어플리케이션
메모리맵드파일

open source database solution
소스코드 공개
제한없는 사용
라이선스 준수

document database
Apache couchDB(Erlang으로구현,JSON)
웹서버를 같이 설치하여 HTTP로 통신
Hbase
HDFS(hadoop distributed filesystem)상에서 동작
카산드라
칼럼기반 데이터베이스

nosql은 언제 사용할까?
매우 큰 데이터 볼륨
	RDBMS가 감당할 정도의 cost를 맞추어 가면서 사용하는
	큰 트래픽의 규모를 지원가능한가?
	메인 데이터 저장소에 저장되지는 않지만, 임시적으로
	사용하는 데이터를 많이 다루어야하는가?
텍스트를 비롯한 많은 이미지들과 같은 
큰 오브젝트들을 많이 다루어야 하는가?
(google,amazon,yahoo,facebook)
매우 큰 데이터 스케일링을 지원하기 위한 스키마 유연성이 필요한가?

테이블->컬랙션
행->문서,BSON
열->필드
테이블 조인->임베디드 문서,링킹
 

문서지향형
	유연한 데이터 모델
	쉬운 확장성
	높은 성능
	표준 스키마는없지만 어느정도의 구조는 있음

몽고디비의 특성
JSON
수평적 확장->샤딩

관련도구
Mongs - 웹브라우저 기반 몽고디비 관리
MongoVue - MongoDB서버 관리
Monad - 다양한 뷰 관찰

MongoDB드라이버(연결하는인터페이스)
여러가지 언어로 인터페이스를 갖춤
★C,★C++,★C#
Erlang,★JAVA,JavaScript
Node.js,Perl,PHP
★Python,★Ruby,★Scala

데이터 모델링
디비설계시,고객의 요구를 분석하고 추출하여 데이터의 논리모델 구성
개체를 도출해 속성에 따라 개체들을 표현

ERWin Data modeler
DB UML Database Modeling Tool

몽고디비 데이터모델링
모델링 방법
	내장방식
	서버 이용시보다 저렴, 더 나은 성능
	단일 데이터베이스 작업에서 관련 데이터 요청/검색 가능

	참조방식
	내장방식은 데이터 중복을 가져오지만, 중복의 의미를 능가하는
	충분한 읽기 성능 이점을 제공하지 않음
	더 복잡한 다대다 관계를 표시
	큰 계층 데이터 세트를 모델링 가능
	서버에대한 접근이 더 많아짐
	수동참조,DBRef참조
	ex>수동참조 : _id를 다른 문서에 저장
	p = db.postings.findOne();
	{
		"_id" : ObjectId("4b866f00234ae01d21d89604"),
		"authur" : "jim",
		"title" : "Brewing Methods"
	}
	// 추가 정보 가져오기
	a = db.users.findOne({_id : p.author})
		{"_id" : "jim", "email" : "jim@gmail.com"}
	// 모든 정보 가져오기
	db.postings.find({author:a_id})
	ex>DB Ref참조 : 문서 사이의 참조를 지원하는 표준 스팩

데이터베이스 연결 방법
var MongoClient = require('mongodb').MongoClient;
// 데이터베이스 연결
MongoClient.connect("mongodb://localhost:27017/exampleDb",function(err,db) {
	if(!err){
	console.log("connected");
	}
});
컬랙션 생성

var MongoClient = require('mongodb').MongoClient;
// 데이터베이스 연결
MongoClient.connect("mongodb://localhost:27017/exampleDb",function(err,db) {
	if(err){return console.dir(err);}
	//문서추가할때까지 컬랙션 생성 안함
	db.collection('test',function(err,collection){});
	//컬랙션이 있는지 오류가 있는지
	db.collection('test',{w:1},function(err,collection){});
	//객체반환전에 데이터컬랙션을 데이터베이스내에 생성하고
	//컬랙션이 있으면 스킵
	db.createCollection('test',function(err,collection){});
	////객체반환전에 데이터컬랙션을 데이터베이스내에 생성하고
	// 컬랙션이 있으면 오류
	db.createCollection('test',{w:1},function(err,collection	{});
{});
});

삭제동작
var MongoClient = require('mongodb').MongoClient;
// 데이터베이스 연결
MongoClient.connect("mongodb://localhost:27017/exampleDb",function(err,db) {
	if(err){return console.dir(err);}
		var collection = db.collection('test');
		var docs = [{mykey:1},{mykey:2},{mykey:3}];

		collection.insert(docs,{w:1},function(err,result){
//마이키가 1이면삭제
			collection.remove({mykey:1});
//마이키가2이면 삭제
			collection.remove({mykey:2},{w:1},function(err,result){};
//모든문서 삭제
	collection.remove();
});
		}		


});


자바 스크립트?

key-value,bigtableclones,documentdatabase,graphdatabase
확장성과 스피드가 준수하고 쿼리와 복잡성이 적당

insert
db.users.insert({_id:"terry",city:"seoul"})
  (테이블)(명령)(키) (벨류)   (키) (벨류)
id=>기본키(12바이트,16진수)
timestamp-machine id-MongoDB Serber PID-번호
4바이트---3바이트----2바이트------------3바이트

db.users.insert({
	user_id:"bcd001",
	age:45,
	status:"A"
})

select
db.users.find({_id:"terry"})

db.users.find(
	{age:{$gt:25}}
)

db.users.find(
	{age:{$lt:25}}
)

db.users.find(
	{age:{$gt:25,$lte:50}}
)
lte<=50

update
db.users.update({_id:"terry"},{$set:{city:"Busan"}})

delete
db.users.remove({_id:"terry"})












문서 생성
문서
	구조 : 필드 이름과 데이터를 키-값으로 정의
	데이터형태 : BSON(JSON바이너리 포맷)
{
	field1:value1,
	field2:value2,
	...
	fieldN:valueN,
}

var myDocument = {
	_id : ObjectID("5099803df3f4948bd2f98391"),
	name : {firstname:"Taejin", lastname:"Park"},
	// 필드 안에 서브문서
	birth : new Date('Dec 01, 1982'),
	favorites : ["Soccer","Drama","Golf"],
	count : NumberLong(10000)
}

문서생성
생성방법 : use
키-값 구조의 문서 정의
{firstname:"suhwan",lastname:"kim",type:"teacher"}

문서 삽입 : insert
컬렉션 연결 : 온점 사용'.'
명령 : db.collection.insert(document)
> db.users.insert({firstname:"suhwan",lastname:"kim",type:"teacher"})

메타데이터 파일
mongod를 실행할 때 데이터파일을 저장하는 dbpath를 지정했다면
해당 디렉터리에 메타데이터가 저장
dbpath의 기본 경로는 윈도우 : c:\data\db 리눅스 : \data\db
mongod.lock 서버 프로세스 아이디를 저장함 : 삭제하면 안됨
db.stats() : 서버 인덱스 컬랙션 확인 명령어(디비상태확인)

db.users.find()
>{"_id" : ObjectId("dasfdfasdfasdfasdfasd)"),
firstname:"suhwan",lastname:"kim",type:"teacher"}
insert _id:1 로 지정후 파일입력하면 문서번호_id변경 가능
>{"_id" : 1),
firstname:"suhwan",lastname:"kim",type:"teacher"}

문서 삭제
remove()

컬렉션 삭제
drop()

문서갱신
update()
필요 매개변수 : 갱신대상문서,갱신내용에대한문서
query : 갱신할 문서나 문서에대한 질의
update : 수정할 문서나 문서에 대한 질의이다
upsert : 기본 값은 false이다, true로 설정하면, query 조건에 일치
하는 문서가 없을 때 update조건이 맞는 문서를 새로 생성하여 삽입
multi : 기본 값은 false이다.true로 설정하면 query조건에 일치하는
모든 문서에 대해 갱신한다 false로 지정된 경우 하나의 문서만 갱신

문서갱신 예
> db.books.update({item:"The New Life"},
	{item:"The New Life", author : "Dante", price : 15},
	{upsert : true}
)

> db.books.find()
{"_id":ObjectId("asdfasdf3284738asdf"), "item":"The New Life", "author" : "Dante", "price" : 15}


질의작성하기
질의모델
find
질의선택자
update

키-값질의
범위질의
공간적질의
문자열탐색질의
집합프레임워크질의
맵리듀스질의

컬렉션
데이터베이스,컬렉션,문서
컬렉션이란? 문서를 담는 저장소
컬렉션 생성 방법
>db.createCollection("sample1"){"ok":1}

컬렉션 크기 조정
>db.createCollection("sample2",{size:204800}) {"ok":1}

제한 컬렉션
높은 성능의 로깅 기능을 위해서 설계된 고정크기컬렉션
생성된 데이터 공간을 큐 형태로 관리
공간이 없으면 오래된 문서에 덮어쓰기 수행

문서 CRUD 동작
CRUD : Create,Read,Update,Delete
문서를 조작하기 위한 모든 동작
생성 db.collection,insert()
조회 db.collection.find()
수정 db.collection.update()
삭제 db.collection.delete()

질의의 구성요소
컬랙션이름
질의조건
프로젝션
수식어
select _id,name,score		<프로젝션
from students			<컬렉션이름
where score > 60		<질의조건
limit 5				<수식어

db.students.find(		<컬렉션이름
	{score:{$gt:60}}	<질의조건
	{name:1,score:1}	<프로젝션
)limit(5)			<수식어


>db.collection.find(<criteria>,<projection>)
findOne() : 여러개의 문서가 반환된 경우 가장 첫번째 문서를 가져옴

질의 선택자
find()의 첫 번째 매개변수로 들어가는 질의 명령을 작성하기 위한
조건절에 포함되는 명령

비교 선택자 : 비교연산을 대신하는 명령어
20대 사용자 검색 예
$gt : 질의에 정의된 값보다 큰값
$gte : 질의에 정의된 값보다 크거나 같은값
$in : 질의에 정의된 값 배열 중 하나와 일치하는 값
$lt : 질의에 정의된 값보다 작은값
$lte : 질의에 정의된 값보다 작거나 같은값
$ne : 질의에 정의된 값과 같지 않은값
$nin : 질의에 정의된 값 배열에 포함되지 않은 값
>db.users.find({age:{$gte:20,$lt:30}})
>db.users.find({age:{$gte:20},age:{$lt:30}})

로직 선택자 : 로직에 대한 질의 선택자
$or : 두가지 이상의 조건절 중 하나가 참인 조건
$and : 두가지 이상의 조건절이 모두 참인 조건
$not : 주어진 조건절에 맞지 않는 조건
$nor : 두가지 이상의 조건절에 모두 맞지 않는 조건
문법
{$or:[{<expression1>},{<expression2>},...,{<expression3>}]}
>db.inventory.find({price:1.99,$or:[{qty:{$lt:20}},{sale:true}]})

요소 선택자
$exist : 특정 필드를 포함하는 조건
$type : 주어진 필드가 특정 필드인 조건
> db.productions.find({color:{$exist:false}})
// 색상 속성이 없는 프로덕트를 찾을때
> db.productions.find({color:{$exist:true}})
// 색상 속성이 있는 프로덕트를 찾을때
> db.products.find({color:null})
// 색상 속성이 없는 프로덕트를 찾을때

평가 선택자
$mod : 주어진 필드의 값이 주어진 나누기 연산의 값인 조건
$regex : 정규 표현식과 일치하는 조건
$where : JavaScript의 조건문에 일치하는 조건
> db.inventory.find({qty:{$mod:[4,0]}})

update()명령 구조
문서 갱신 명령 : db.collection.update()
다중갱신, 문서 일부 갱신
문법
> db.collection.update(
	<query>,
	<update>,
	{
		upsert:<Boolean>,
		multi:<Boolean>,
	}
)
> db.bios.update(
	{"awards.award":"Turing"},
	{$set:{turing:true}},
	{multi:true}
)

집합연산
데이터레코드들을 처리하고 연산된 결과를 얻는 연산자
데이터 세트들에 대해 연산을 수행,검증하는 집합연산 세트를 제공
질의와 마찬가지로 컬렌션을 입력으로 사용

Aggregation Pipelin
Data processing pipeline 개념 이용
New aggregation framework 도입
Multi-stage pipeline : documents->aggregated result

Aggregation Pipelin
효율적인 data aggregation 제공
MongoDB에서의 native operation 들을 사용

count 함수
하나의 컬렉션에 대해 조건에 맞는 문서 수 반환
조건에 대한 합계를 얻을 때 유용
>db.collection.count(query)
>db.students.count({dt:{$gt:new Date('01/01/2013')}})
>db.students.find({dt:{$gt:new Date('01/01/2013)}}).count()

distinct()
특정 필드에 대한 값을 컬렉션으로 반환
반환된 컬렉션 값은 중복되지 않은 고유 값
>db.collection.distinct(field,query)
>db.students.distinct('dt')
>db.students.distinct('name',{score:{$gte:60}})

최대값/최소값
별도 함수가 따로 없음
방법
최대값 : 문서를 내림차순으로 정렬, 가장 처음 정렬된 값 사용
최소값 : 문서를 오름차순으로 정렬, 가장 처음 정렬된 값 사용
사용 예
최대점수 score 필드 가져오기 sort(),limit()함수 사용,student컬렉션
>db.students.find({}).sort({score:-1}).limit(1)
최소점수 score 필드 가져오기
>db.students.find({}).sort({score:1}).limit(1)

group()
문서를 집합하여 특정 필드로 그룹화하고 결과값을 만듬
기존 RDBMS : SELECT ~ GROUP BY
문법
> db.collection.group({key,reduce,initial,[keyf,][cond,]finalize})
사용 예
> db.students.group({
	key:{name:1},
	cond:{score:{$gte:30}},
	reduce:function(cur,result){result.score += cur.score},
	initial:{score:0}
})

맵리듀스
구글에서 대용량 데이터 처리를 분산 병렬 컴퓨팅에서 처리하기 위한
목적으로 제작하여 2004년 발표한 SW Framework
Map과Reduce라는 함수기반으로 구성
Map : 키-값을 읽어 필터링하거나 다른 값으로 변환
Reduce : Map함수를 통해 출력된 결과 값>>새로운 키 값 기준으로
 Grouping>>집합연산수행




 